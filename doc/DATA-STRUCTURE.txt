Abstract Syntax Tree ->

Node {
  offset: <
    start = int,
    end = int
  >,
  definition: (
    range,
    regular_expression,
    object,
    enumeration,
    array,
  ),
  body: (

    // object
    [
      {
        name: string,
        is_optional: bool,
        value: (
          Node,
          int,
          double,
          bool,
          string,
          byte
        )
      }
    ],

    // enumeration
    [int],

    // array
    (
      int,
      double,
      enumeration,
      bool,
      string,
      byte
    ),

    // regular expression
    {
      pattern: string,
      flag: {
        global: bool,
        case_insensitive: bool,
        multi: bool
      }
    }

    // range
    {
      lower_bound?: int|double,
      upper_bound?: int|double,
      keyword: (
        double,
        string,
        int,
      )
    }
  )
}

Filter Rule ->

{
  notation: array

}